@using System.Linq;
@using DevExpress.Data.Filtering;
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "GridView";
        settings.CallbackRouteValues = new { Controller = "Home", Action = "GridViewPartial" };
        settings.CustomActionRouteValues = new { Controller = "Home", Action = "CustomFilterProcessingAction" };
        settings.KeyFieldName = "ModelID";
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsBehavior.AllowSelectByRowClick = false;
        settings.Columns.Add("ModelID");
        
        settings.Columns.Add("ModelName");
        settings.Columns.Add("ModelState");
        settings.BeforeGetCallbackResult = (sender, e) =>
        {
            string field = ViewData["field"] as string;
            BetweenOperator filterExpression = ViewData["filterExpression"] as BetweenOperator;
            if (String.IsNullOrEmpty(field))
                return;
            MVCxGridView GridView = sender as MVCxGridView;
            var criterias = CriteriaColumnAffinityResolver.SplitByColumns(CriteriaOperator.Parse(GridView.FilterExpression));
            OperandProperty op = new OperandProperty(field);
            if (!criterias.Keys.Contains(new OperandProperty(field)))
                criterias.Add(op, filterExpression);
            else
                criterias[op] = filterExpression;
            var expression = CriteriaOperator.ToString(GroupOperator.And(criterias.Values));
            GridView.FilterExpression = expression;
        };
        settings.Columns.Add(c =>
        {
            c.FieldName = "ModelDate";
            c.Caption = "Model Date";
            c.Settings.AllowHeaderFilter = DefaultBoolean.False;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetHeaderTemplateContent(content =>
            {
                var column = content.Column as GridViewDataColumn;
                ViewContext.Writer.Write(String.Format(@" <table cellspacing='0' cellpadding='0' style='width: 100%; border-collapse: collapse;'>
                            <tbody>
                                <tr>
                                    <td>{0}</td>
                                    <td style='width: 1px; text-align: right;' ><span class='dx-vam'></span>", column.Caption));
                if (column.SortOrder == DevExpress.Data.ColumnSortOrder.Ascending)
                    ViewContext.Writer.Write(String.Format("<img alt='[Sort arrow]' src='{0}' class='dxGridView_gvHeaderSortUp_DevEx dx-vam SortArrow' />", Url.Content("~/Content/img_trans.gif")));
                else if (column.SortOrder == DevExpress.Data.ColumnSortOrder.Descending)
                    ViewContext.Writer.Write(String.Format("<img alt='[Sort arrow]' src='{0}' class='dxGridView_gvHeaderSortDown_DevEx dx-vam SortArrow' />", Url.Content("~/Content/img_trans.gif")));
                ViewContext.Writer.Write(String.Format(@"<img class='MyHeaderFilter' alt='[HeaderFilter]'  src='{0}'  style='cursor:default;' onmousedown='return CancelEvent(event);'  onclick=OnColumnClick(this,'{1}'); />", Url.Content("~/Content/img_trans.gif"), ((GridViewDataColumn)content.Column).FieldName));
                ViewContext.Writer.Write(@"</td>
                                </tr>
                            </tbody>
                        </table>");
            });

        });
    });
}
@grid.Bind(Model).GetHtml()
